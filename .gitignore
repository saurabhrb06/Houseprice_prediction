import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generate a synthetic dataset
np.random.seed(0)
num_samples = 100
square_footage = np.random.randint(1000, 3000, size=num_samples)
bedrooms = np.random.randint(1, 5, size=num_samples)
bathrooms = np.random.randint(1, 4, size=num_samples)
prices = 100000 + 150 * square_footage + 20000 * bedrooms + 15000 * bathrooms + np.random.randint(-5000, 5000, size=num_samples)

# Create a DataFrame
data = pd.DataFrame({'SquareFootage': square_footage,
                     'Bedrooms': bedrooms,
                     'Bathrooms': bathrooms,
                     'Price': prices})

# Split the data into training and testing sets
X = data[['SquareFootage', 'Bedrooms', 'Bathrooms']]
y = data['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plot actual vs. predicted prices
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs. Predicted Prices")
plt.show()

# Save the dataset to a CSV file
data.to_csv('house_data.csv', index=False)

# Example input for prediction
new_data = np.array([[1500, 3, 2]])  # Square footage, bedrooms, bathrooms

# Predict the price
predicted_price = model.predict(new_data)
print(f'Predicted Price: ${predicted_price[0]:.2f}')
